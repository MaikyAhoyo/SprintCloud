package com.formaciondbi.springboot.app.libros.controllers;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.formaciondbi.springboot.app.libros.models.entity.Libro;
import com.formaciondbi.springboot.app.libros.models.service.ILibroService;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
public class LibroController {
	
	@Autowired
	private Environment env;
	
	@Value("${server.port}")
	private Integer port;
	
	
	@Autowired
	private ILibroService libroService;
	
	@GetMapping("/listar")
	public List<Libro> listar(){
		return libroService.findAll().stream().map(libro -> {
			libro.setPort(Integer.parseInt(env.getProperty("local.server.port")));
			return libro;
		}).collect(Collectors.toList());
	}
	
	@HystrixCommand(fallbackMethod = "MetodoAlternativo")
	@GetMapping("/listar/{id}")
	public Libro detalle(@PathVariable Long id) {
		//Libro libro = libroService.findById(id);
		Libro libro = null;
		libro.setPort(Integer.parseInt(env.getProperty("local.server.port")));
		return libro;
	}

	@PostMapping("/crear")
	public ResponseEntity<?> crear(@RequestBody Libro libro) {
	    Libro libroExistente = libroService.findByIsbn(libro.getISBN());
	    if (libroExistente != null) {
	        return ResponseEntity
	                .status(HttpStatus.CONFLICT)
	                .body("Ya existe un libro con el ISBN: " + libro.getISBN());
	    }

	    libro.setCreateAt(new Date());
	    Libro nuevoLibro = libroService.save(libro);

	    return ResponseEntity.status(HttpStatus.CREATED).body(nuevoLibro);
	}

	
	@DeleteMapping("/eliminar/{id}")
	public void eliminar(@PathVariable Long id) {
	    libroService.delete(id);
	}

}