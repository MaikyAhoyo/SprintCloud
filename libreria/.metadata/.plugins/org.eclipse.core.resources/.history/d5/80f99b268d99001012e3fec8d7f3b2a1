package com.formaciondbi.springboot.app.usuarios.controllers;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.formaciondbi.springboot.app.usuarios.models.entity.Usuario;
import com.formaciondbi.springboot.app.usuarios.models.service.IUsuarioService;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
public class UsuarioController {
	
	@Autowired
	private Environment env;
	
	@Value("${server.port}")
	private Integer port;
	
	
	@Autowired
	private IUsuarioService usuarioService;
	
	@GetMapping("/listar")
	public List<Usuario> listar(){
		return usuarioService.findAll().stream().map(usuario -> {
			usuario.setPort(Integer.parseInt(env.getProperty("local.server.port")));
			return usuario;
		}).collect(Collectors.toList());
	}
	
	@HystrixCommand(fallbackMethod = "MetodoAlternativo")
	@GetMapping("/listar/{id}")
	public Usuario detalle(@PathVariable Long id) {
		Usuario usuario = usuarioService.findById(id);
		usuario.setPort(Integer.parseInt(env.getProperty("local.server.port")));
		return usuario;
	}
	
	public Usuario MetodoAlternativo(Long id, Integer cantidad) {
		Usuario usuario = new Usuario();
		Date date = new Date();
		
		usuario.setNombre("Gael");
		usuario.setEdad(18);
		usuario.setEmail("papupro@gmail.com");
		usuario.setCreateAt(date);
		return usuario;
	}

	@PostMapping("/crear")
	public ResponseEntity<?> crear(@RequestBody Usuario usuario) {
	    Usuario libroExistente = usuarioService.findByEmail(usuario.getEmail());
	    if (libroExistente != null) {
	        return ResponseEntity
	                .status(HttpStatus.CONFLICT)
	                .body("Ya existe un usuario con el Email: " + usuario.getEmail());
	    }

	    usuario.setCreateAt(new Date());
	    Usuario nuevoUsuario = usuarioService.save(usuario);

	    return ResponseEntity.status(HttpStatus.CREATED).body(nuevoUsuario);
	}

	
	@DeleteMapping("/eliminar/{id}")
	public void eliminar(@PathVariable Long id) {
	    usuarioService.delete(id);
	}
}